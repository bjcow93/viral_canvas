{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./js/binds.js","webpack:///./js/checks.js","webpack:///./js/entry.js","webpack:///./js/game_view.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;AClFA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA,uCAAuC,OAAO,IAAI,OAAO,IAAI,OAAO,IAAI,UAAU;;AAElF;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,GAAG;;AAEH;;AAEA;AACA;AACA,GAAG;;AAEH,4BAA4B;AAC5B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;;;;;;;;;;;;AC9IA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mCAAmC,UAAU,OAAO,UAAU;AAC9D;AACA;AACA;AACA,oCAAoC,WAAW,OAAO,WAAW;AACjE;AACA;AACA;AACA,yCAAyC,gBAAgB,OAAO,gBAAgB;AAChF;AACA;AACA;AACA,oCAAoC,WAAW,OAAO,WAAW;AACjE;AACA;AACA;AACA,mCAAmC,UAAU,OAAO,UAAU;AAC9D;AACA;AACA;AACA,yCAAyC,oBAAoB,OAAO,WAAW;AAC/E;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;AC/CA;AACA;;AAEA;AACA;AACA,CAAC;;;;;;;;;;;;ACLD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,mBAAmB,qBAAqB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA,mBAAmB,wBAAwB;AAC3C;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA,kBAAkB,iCAAiC;AACnD,oBAAoB,mCAAmC;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,sBAAsB,EAAE,GAAG,EAAE;AAC7B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,sBAAsB,qBAAqB;AAC3C;AACA;AACA;;AAEA,yBAAyB,8BAA8B;AACvD,2BAA2B,4BAA4B;AACvD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;;AAEA;AACA,oCAAoC,IAAI,GAAG,IAAI;AAC/C,6BAA6B,EAAE,GAAG,IAAI;AACtC,qCAAqC,IAAI,GAAG,IAAI;;AAEhD,+BAA+B,IAAI,GAAG,EAAE;AACxC,8BAA8B,EAAE,GAAG,EAAE;AACrC,gCAAgC,IAAI,GAAG,EAAE;;AAEzC,oCAAoC,IAAI,GAAG,IAAI;AAC/C,gCAAgC,EAAE,GAAG,IAAI;AACzC,qCAAqC,IAAI,GAAG,IAAI;;AAEhD;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,oCAAoC,SAAS,GAAG,SAAS;;AAEzD;AACA;AACA;AACA;;AAEA,oCAAoC,SAAS,GAAG,SAAS;;AAEzD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,mCAAmC,wBAAwB;AAC3D;;AAEA,iCAAiC,sBAAsB;AACvD;;AAEA;AACA;AACA;AACA;AACA;;AAEA","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./js/entry.js\");\n","const GameView = require('./game_view.js');\nconst checks = require('./checks.js');\n\nlet didSettingsChange = false;\nlet blinkRestartClearInterval;\n\nconst bindControls = () => {\n  let gameView;\n\n  const restart = document.getElementById(\"restart-button\");\n  const play = document.getElementById(\"play-button\");\n  const pause = document.getElementById(\"pause-button\");\n\n  play.addEventListener(\"click\", () => {\n    gameView.paused = false;\n    play.style.display = \"none\";\n    pause.style.display = \"block\";\n  });\n\n  pause.addEventListener(\"click\", () => {\n    gameView.paused = true;\n    play.style.display = \"block\";\n    pause.style.display = \"none\";\n  });\n\n  const widthEl = document.getElementById(\"width\");\n  const heightEl = document.getElementById(\"height\");\n  const bgColorEl = document.getElementById(\"background-color\");\n  const bgOpacityEl = document.getElementById(\"background-opacity\");\n  const numCirclesEl = document.getElementById(\"numCircles\");\n  const radiusEl = document.getElementById(\"radius\");\n  const speedEl = document.getElementById(\"speed\");\n  const numEndCirclesEl = document.getElementById(\"endCircles\");\n  const startColorEl = document.getElementById(\"start-color\");\n  const endColorEl = document.getElementById(\"end-color\");\n\n  handleChange(widthEl);\n  handleChange(heightEl);\n  handleChange(bgColorEl);\n  handleChange(bgOpacityEl);\n  handleChange(numCirclesEl);\n  handleChange(radiusEl);\n  handleChange(speedEl);\n  handleChange(numEndCirclesEl);\n  handleChange(startColorEl);\n  handleChange(endColorEl);\n\n  restart.addEventListener(\"click\", e => {\n    if (checks()) return;\n\n    document.getElementById(\"myCanvas\").remove();\n\n    const width = parseInt(widthEl.value);\n    const height = parseInt(heightEl.value);\n    const bgColor = bgColorEl.value;\n    const bgOpacity = bgOpacityEl.value;\n\n    const canvas = document.createElement(\"canvas\");\n    canvas.id = \"myCanvas\";\n    canvas.width = width;\n    canvas.height = height;\n\n    const rgb = getRGB(bgColor);\n\n    canvas.style = `background: rgba(${rgb[0]}, ${rgb[1]}, ${rgb[2]}, ${bgOpacity}`;\n\n    document.getElementById(\"canvas-container\").appendChild(canvas);\n\n    const numCircles = parseInt(numCirclesEl.value);\n    const radius = parseInt(radiusEl.value);\n    const speed = parseInt(speedEl.value);\n    const numEndCircles = parseInt(numEndCirclesEl.value);\n    const startColor = startColorEl.value;\n    const endColor = endColorEl.value;\n\n    const options = {\n      numCircles,\n      radius,\n      speed,\n      startColor,\n      endColor,\n      numEndCircles,\n      width,\n      height\n    };\n\n    didSettingsChange = false;\n    clearInterval(blinkRestartClearInterval);\n\n    gameView.stop();\n    gameView = new GameView(options);\n    gameView.start();\n  });\n\n  const modalBackground = document.getElementById(\"modal-background\");\n\n  modalBackground.addEventListener(\"click\", () => {\n    modalBackground.style.display = \"none\";\n  });\n  \n  gameView = new GameView({});\n  gameView.start();\n};\n\nconst getRGB = hex => {\n  const colors = [];\n  colors.push(parseInt(hex.substr(1,2), 16));\n  colors.push(parseInt(hex.substr(3,2), 16));\n  colors.push(parseInt(hex.substr(5,2), 16));\n  return colors;\n};\n\nconst handleChange = el => {\n  const startVal = el.value;\n  el.addEventListener(\"input\", e => {\n    setTimeout(() => {\n      if (e.target.value !== startVal) {\n        if (!didSettingsChange) {\n          blinkRestart();\n          didSettingsChange = true;\n        }\n        showPopup();\n      }\n    }, 1000);\n  });\n};\n\nconst showPopup = () => {\n  const settingsChanged = document.getElementById(\"settings-changed\");\n  settingsChanged.style.opacity = \"1\";\n  setTimeout(() => {\n    settingsChanged.style.opacity = \"0\";\n  }, 3000);\n};\n\nconst blinkRestart = () => {\n  blinkRestartClearInterval = setInterval(() => {\n    const btn = document.getElementById(\"restart-button\");\n    btn.style.background = btn.style.background === \"white\" ? \"lightgrey\" : \"white\";\n  }, 750);\n};\n\nmodule.exports = bindControls;\n","const MIN_WIDTH = 100;\nconst MAX_WIDTH = 1300;\nconst MIN_HEIGHT = 100;\nconst MAX_HEIGHT = 700;\nconst MIN_NUM_CIRCLES = 1;\nconst MAX_NUM_CIRCLES = 2500;\nconst MIN_RADIUS = 1;\nconst MAX_RADIUS = 20;\nconst MIN_SPEED = 1;\nconst MAX_SPEED = 200;\nconst MIN_NUM_END_CIRCLES = 1;\n\nconst checks = () => {\n  const width = parseInt(document.getElementById(\"width\").value);\n  const height = parseInt(document.getElementById(\"height\").value);\n  const numCircles = parseInt(document.getElementById(\"numCircles\").value);\n  const radius = parseInt(document.getElementById(\"radius\").value);\n  const speed = parseInt(document.getElementById(\"speed\").value);\n  const numEndCircles = parseInt(document.getElementById(\"endCircles\").value);\n\n  if (width < MIN_WIDTH || width > MAX_WIDTH) {\n    alert(`Width must be between ${MIN_WIDTH} and ${MAX_WIDTH}`);\n    return true;\n  }\n  if (height < MIN_HEIGHT || height > MAX_HEIGHT) {\n    alert(`Height must be between ${MIN_HEIGHT} and ${MAX_HEIGHT}`);\n    return true;\n  }\n  if (numCircles < MIN_NUM_CIRCLES || numCircles > MAX_NUM_CIRCLES) {\n    alert(`Num Circles must be between ${MIN_NUM_CIRCLES} and ${MAX_NUM_CIRCLES}`);\n    return true;\n  }\n  if (radius < MIN_RADIUS || radius > MAX_RADIUS) {\n    alert(`Radius must be between ${MIN_RADIUS} and ${MAX_RADIUS}`);\n    return true;\n  }\n  if (speed < MIN_SPEED || speed > MAX_SPEED) {\n    alert(`Speed must be between ${MIN_SPEED} and ${MAX_SPEED}`);\n    return true;\n  }\n  if (numEndCircles < MIN_NUM_END_CIRCLES || numEndCircles > numCircles) {\n    alert(`End Circles must be between ${MIN_NUM_END_CIRCLES} and ${numCircles}`);\n    return true;\n  }\n  return false;\n};\n\nmodule.exports = checks;\n","const GameView = require('./game_view.js');\nconst bindControls = require('./binds.js');\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  bindControls();\n});\n","const NUM_CIRCLES = 100;\nconst RADIUS = 10;\nconst START_COLOR = new paper.Color(\"red\");\nconst END_COLOR = new paper.Color(\"blue\");\nconst NUM_END_CIRCLES = 1;\nconst SPEED = 10;\nconst SPEED_SCALE = 10;\nconst WIDTH = 700;\nconst HEIGHT = 400;\n\nclass GameView {\n  constructor(options) {\n    this.numCircles = options.numCircles || NUM_CIRCLES;\n    this.radius = options.radius || RADIUS;\n    this.startColor = options.startColor ? new paper.Color(options.startColor) : START_COLOR;\n    this.endColor = options.endColor ? new paper.Color(options.endColor) : END_COLOR;\n    this.numEndCircles = options.numEndCircles || NUM_END_CIRCLES;\n    this.speed = (options.speed || SPEED) / SPEED_SCALE;\n    this.width = options.width || WIDTH;\n    this.height = options.height || HEIGHT;\n\n    this.startTime = new Date().getTime();\n    this.paused = false;\n  }\n\n  start() {\n    paper.setup(\"myCanvas\");\n    this.createCircles();\n    this.createCells();\n    this.animateCircles();\n  }\n\n  stop() {\n    view.onFrame = () => {};\n  }\n\n  createCircles() {\n    this.startCircles = [];\n    this.endCircles = [];\n\n    for (let i = 0; i < this.numCircles; i++) {\n      let centerX = Point.random().x * (view.size.width - 2 * this.radius) + this.radius;\n      let centerY = Point.random().y * (view.size.height - 2 * this.radius) + this.radius;\n      let center = new Point(centerX, centerY);\n      let circle = new Path.Circle(center, this.radius);\n      circle.fillColor = this.startColor;\n      circle.direction = new Point(this.speed, this.speed);\n      circle.direction.angle = Math.random() * 360;\n\n      this.startCircles.push(circle);\n    }\n\n    const children = project.activeLayer.children;\n\n    for (let i = 0; i < this.numEndCircles; i++) {\n      children[i].fillColor = this.endColor;\n      const idx = this.startCircles.indexOf(children[i]);\n      this.startCircles.splice(idx, 1);\n      this.endCircles.push(children[i]);\n    }\n\n  }\n  \n  createCells() {\n    this.cells = {};\n    this.cellWidth = (2.0 * this.radius);\n    this.cellHeight = (2.0 * this.radius);\n\n    for(let i = 0; i < this.width / this.cellWidth; i++) {\n      for(let j = 0; j < this.height / this.cellHeight; j++) {\n        const cell = [];\n        project.activeLayer.children.forEach(circle => {\n          if (i * this.cellWidth < circle.position.x &&\n              circle.position.x <= (i+1) * this.cellWidth &&\n              j * this.cellHeight < circle.position.y &&\n              circle.position.y <= (j+1) * this.cellHeight) {\n                cell.push(circle);\n              }\n        });\n        this.cells[`${i}-${j}`] = cell;\n      }\n    }\n  }\n  \n  animateCircles() {\n    view.onFrame = () => {\n      if (!this.paused) {\n        const children = project.activeLayer.children;\n        for(let i = 0; i < children.length; i++) {\n          const child = children[i];\n          this.updatePosition(child);\n        }\n\n        // for(let i = 0; i < this.startCircles.length; i++) {\n        //   for(let j = 0; j < this.endCircles.length; j++) {\n        //     const startCircle = this.startCircles[i];\n        //     const endCircle = this.endCircles[j];\n        //     this.checkCollision(startCircle, endCircle);\n        //   }\n        // }\n\n        children.forEach(circle => {\n          const cellX = Math.floor(circle.position.x / this.cellWidth);\n          const cellY = Math.floor(circle.position.y / this.cellHeight);\n          this.checkSurroundingCollisions(circle, cellX, cellY);\n        });\n\n        this.updateDisplay(this.startCircles.length, this.endCircles.length);\n      }\n    };\n  }\n\n  checkSurroundingCollisions(circle, x, y) {\n    const upperLeft = this.cells[`${x-1}-${y-1}`] || null;\n    const up = this.cells[`${x}-${y-1}`] || null;\n    const upperRight = this.cells[`${x+1}-${y-1}`] || null;\n\n    const left = this.cells[`${x-1}-${y}`] || null;\n    const mid = this.cells[`${x}-${y}`] || null;\n    const right = this.cells[`${x+1}-${y}`] || null;\n\n    const lowerLeft = this.cells[`${x-1}-${y+1}`] || null;\n    const lower = this.cells[`${x}-${y+1}`] || null;\n    const lowerRight = this.cells[`${x+1}-${y+1}`] || null;\n\n    if (upperLeft) {\n      upperLeft.forEach(other => this.checkCollision(circle, other));\n    }\n\n    if (up) {\n      up.forEach(other => this.checkCollision(circle, other));\n    }\n\n    if (upperRight) {\n      upperRight.forEach(other => this.checkCollision(circle, other));\n    }\n\n    if (left) {\n      left.forEach(other => this.checkCollision(circle, other));\n    }\n\n    if (mid) {\n      mid.forEach(other => this.checkCollision(circle, other));\n    }\n\n    if (right) {\n      right.forEach(other => this.checkCollision(circle, other));\n    }\n\n    if (lowerLeft) {\n      lowerLeft.forEach(other => this.checkCollision(circle, other));\n    }\n\n    if (lower) {\n      lower.forEach(other => this.checkCollision(circle, other));\n    }\n    \n    if (lowerRight) {\n      lowerRight.forEach(other => this.checkCollision(circle, other));\n    }\n\n  }\n\n  checkCollision(start, end) {\n    if (start === end) return;\n\n    const xDist = start.position.x - end.position.x;\n    const yDist = start.position.y - end.position.y;\n    const dist = (xDist * xDist) + (yDist * yDist);\n\n    if (dist <= (2 * this.radius) * (2 * this.radius)) {\n      if (!start.fillColor.equals(end.fillColor)) {\n        start.fillColor = this.endColor;\n\n        if (this.startCircles.includes(start)) {\n          const idx = this.startCircles.indexOf(start);\n          this.startCircles.splice(idx, 1);\n        }\n\n        if (!this.endCircles.includes(start)) {\n          this.endCircles.push(start);\n        }\n      }\n    }\n  }\n\n  updatePosition(circle) {\n    const oldCellX = Math.floor(circle.position.x / this.cellWidth);\n    const oldCellY = Math.floor(circle.position.y / this.cellHeight);\n    \n    const dx = circle.direction.x;\n    const dy = circle.direction.y;\n    \n    if (circle.position.x + dx + this.radius > view.bounds.right) {\n      circle.direction.x = -circle.direction.x;\n    }\n    \n    if (circle.position.x + dx - this.radius < 0) {\n      circle.direction.x = -circle.direction.x;\n    }\n    \n    if (circle.position.y + dy + this.radius > view.bounds.bottom) {\n      circle.direction.y = -circle.direction.y;\n    }\n    \n    if (circle.position.y + dy - this.radius < 0) {\n      circle.direction.y = -circle.direction.y;\n    }\n    \n    circle.position.x += circle.direction.x;\n    circle.position.y += circle.direction.y;\n    \n    const newCellX = Math.floor(circle.position.x / this.cellWidth);\n    const newCellY = Math.floor(circle.position.y / this.cellHeight);\n\n    if (oldCellX !== newCellX || oldCellY !== newCellY) {\n      const oldCell = this.cells[`${oldCellX}-${oldCellY}`];\n\n      if (oldCell) {\n        const idx = oldCell.indexOf(circle);\n        oldCell.splice(idx, 1);\n      }\n      \n      const newCell = this.cells[`${newCellX}-${newCellY}`];\n      \n      if (newCell) {\n        newCell.push(circle);\n      }\n    }\n  }\n\n  updateDisplay(numStart, numEnd) {\n    const numStartLeft = document.getElementById(\"start-circles-left\");\n    const numEndLeft = document.getElementById(\"end-circles-left\");\n    const timer = document.getElementById(\"timer\");\n\n    numStartLeft.style = `color: ${this.startColor.toCSS()}`;\n    numStartLeft.innerText = numStart;\n\n    numEndLeft.style = `color: ${this.endColor.toCSS()}`;\n    numEndLeft.innerText = numEnd;\n\n    if (numEnd < this.numCircles) {\n      timer.innerText = ((new Date().getTime() - this.startTime) / 1000).toFixed(1) + \" s\";\n    }\n  }\n}\n\nmodule.exports = GameView;\n"],"sourceRoot":""}